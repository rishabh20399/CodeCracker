//LOGIC: Same as LevelOrder traversal(linewise printing variation)

//Time Complexity: O(N)
//Since each node is visited ONLY ONCE

//Space Complexity: O(N)
//Since maximum no. of nodes that can populate the queue at a time id N/2.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        if(root==null) return ans;
        Queue<TreeNode> q=new LinkedList<>();

        q.add(null);
        q.add(root);

        while(!q.isEmpty()){
            TreeNode curr=q.peek();
            q.poll();

            if(curr==null){
                if(!q.isEmpty()) {
                    curr=q.peek();
                    ans.add(curr.val);
                    q.add(null);
                }
                continue;
            }

            if(curr.right !=null) q.add(curr.right);
            if(curr.left !=null) q.add(curr.left);
        }
        return ans;
    }
}

//Alternate...(Using recursion)

//LOGIC: Always add the rightmost element first so other elements on the same level won't be added if we put the condition IF(level == ans.size()).

//Time Complexity: O(N)
//Space Complexity: O(logN)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        func(ans, root,0);
        return ans;
    }

    static void func(List<Integer> ans, TreeNode curr,int level){
        if(curr==null) return;
        if(level == ans.size()) ans.add(curr.val);
        func(ans, curr.right,level+1);
        func(ans, curr.left,level+1);
    }
}
