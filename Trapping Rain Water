//LOGIC:  Basically, rainwater accumulates according to the height of the shorter of left/right-most sides-->
          The only exception is the existence of a height > (shorter of left/right-most sides)-->
          In which case, the collection of water is ONLY affected on the side of (longer of left/right-most sides)-->

          **So we always start counting water from the shorter side**--> 

          We change the left/right-most side accordingly as we encounter such cases-->
          This same thing can happen any number of times for the same height array while iterating through it

//Time Complexity: O(n) 
//Space Complexity: O(1)

class Solution {
    public int trap(int[] height) {
        int n =height.length;
        int ans=0;
        int i=0;
        int j=n-1;
        int maxL=height[i],maxR=height[j];
        while(i<j){
            maxL=Math.max(maxL,height[i]);
            maxR=Math.max(maxR,height[j]);

            if(maxL<=maxR){
                ans+=maxL-height[i];
                i++;
            }else{
                ans+=maxR-height[j];
                j--;
            }
        }
        return ans;
    }
}
