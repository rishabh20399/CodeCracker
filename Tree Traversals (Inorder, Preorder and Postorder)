//InOrder TRAVERSAL (L-->N-->R)

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        traverse(root,ans);
        return ans;
    }
    static void traverse(TreeNode node,List<Integer> ans){
        if(node==null) return;
        traverse(node.left,ans);
        ans.add(node.val);
        traverse(node.right,ans);
    }
}


//PreOrder TRAVERSAL (N-->L-->R)

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        traverse(root,ans);
        return ans;
    }
    static void traverse(TreeNode node,List<Integer> ans){
        if(node==null) return;
        ans.add(node.val);
        traverse(node.left,ans);
        traverse(node.right,ans);
    }
}


//PostOrder TRAVERSAL (L-->R-->N)

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        traverse(root,ans);
        return ans;
    }
    static void traverse(TreeNode node,List<Integer> ans){
        if(node==null) return;
        traverse(node.left,ans);
        traverse(node.right,ans);
        ans.add(node.val);
    }
}

//LevelOrder TRAVERSAL 

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root==null) return new ArrayList<>();
        List<List<Integer>> ans=new ArrayList<>();
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty()){
            int size=q.size();
            List<Integer> list=new ArrayList<>();
            for(int i=0;i<size;i++){
                TreeNode curr=new TreeNode();
                curr=q.poll();
                list.add(curr.val);
                if(curr.left !=null){
                    q.add(curr.left);
                }
                if(curr.right !=null){
                    q.add(curr.right);
                }
            }
            ans.add(list);   
        }
        return ans;
    }
}
